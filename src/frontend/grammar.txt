<program> ::= <statement_list>

<statement_list> ::= <statement>*

<statement> ::= <variable_declaration>
              | <function_declaration>
              | <struct_declaration>
              | <expression_statement>
              | <import_statement>
              | <return_statement>
              | <iteration_statement>

<expression_statement> ::= <expression>

<variable_declaration> ::= "let" <identifier> "=" <expression>
<variable_assignment> ::= <identifier> "=" <expression>

<function_declaration> ::= "fn" <identifier> "(" <parameter_list>? ")" "=" <expression>
<parameter_list> ::= <identifier> ("," <identifier>)*

<struct_declaration> ::= "struct" <identifier> "{" <struct_body>? "}"
<struct_body> ::= <struct_member>*
<struct_member> ::= <function_declaration> | <variable_declaration>

<expression> ::= <logic_or>

<logic_or> ::= <logic_and> ("or" <logic_and>)*
<logic_and> ::= <equality_expression> ("and" <equality_expression>)*
<equality_expression> ::= <comparison_expression> (("==" | "!=") <comparison_expression>)*
<comparison_expression> ::= <additive_expression> ((">" | ">=" | "<" | "<=") <additive_expression>)*
<additive_expression> ::= <multiplicative_expression> (("+" | "-") <multiplicative_expression>)*
<multiplicative_expression> ::= <unary_expression> (("*" | "/") <unary_expression>)*

<unary_expression> ::= ("+" | "-" | "!") <unary_expression> | <primary_expression>

<primary_expression> ::= <literal>
                       | <identifier>
                       | "(" <expression> ")"
                       | <function_call>
                       | <conditional_expression>
                       | <member_access>
                       | <array_access>
                       | <object_creation>

<conditional_expression> ::= "If" "<" <expression> "," <expression> "," <expression> ">"

<function_call> ::= <identifier> "(" <argument_list>? ")"
<argument_list> ::= <expression> ("," <expression>)*

<member_access> ::= <primary_expression> "." <identifier>
<array_access> ::= <identifier> "[" <expression> "]"

<object_creation> ::= <identifier> "{" "}"
<array_literal> ::= "[" <element_list>? "]"
<element_list> ::= <expression> ("," <expression>)*

<object_literal> ::= "{" <property_list>? "}"
<property_list> ::= <property> ("," <property>)*
<property> ::= <identifier> ":" <expression>

<iteration_statement> ::= "Range" "<" <expression> "," <expression> ">" "{" <statement_list> "}"

<import_statement> ::= "import" <string_literal>

<return_statement> ::= "return" <expression>

<literal> ::= <number_literal>
           | <string_literal>
           | <boolean_literal>
           | <array_literal>
           | <object_literal>

<number_literal> ::= "-"? <digit>+
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<string_literal> ::= '"' <characters>* '"'
<characters> ::= <character>*
<character> ::= <letter> | <digit> | <symbol>

<boolean_literal> ::= "true" | "false"

<identifier> ::= <letter> (<alphanumeric>)*
<alphanumeric> ::= <letter> | <digit> | "_"

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
           | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<symbol> ::= "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "+" | "="
          | "{" | "}" | "[" | "]" | ":" | ";" | "," | "." | "<" | ">" | "/" | "?" | "|"
          | "'" | "`" | "~"
