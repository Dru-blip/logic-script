<Type> ::= "Int" | "Bool" | "Str" | <Identifier> | <ArrayType>;
<ArrayType> ::= "[" <Type> "]";

<Program> ::= <StatementList>;

<StatementList> ::= (<Statement>)*;

<Statement> ::= <VariableDeclaration>
              | <FunctionDeclaration>
              | <StructDeclaration>
              | <ReturnStatement>
              | <ImportStatement>
              | <IterationStatement>
              | <ConditionalStatement>
              | <ExpressionStatement>

<ExpressionStatement> ::= <Expression> ";";

<VariableDeclaration> ::= "let" <Identifier> ":" <Type> ("=" <Expression>)? ";";

<ReturnStatement> ::= "return" <Expression> ";";
<ImportStatement> ::= "import" <StringLiteral> ";";

<IterationStatement> ::= "for" <Identifier> "in" <Iterable> "{" <StatementList> "}";
<Iterable> ::= <Expression> (".." <Expression>)?


<ConditionalStatement> ::= "if" <Expression> "{" <StatementList> "}" ("elif" <Expression> "{" <StatementList> "}")* ("else" "{" <StatementList> "}")?;

<FunctionDeclaration> ::= "fn" <Identifier> "(" <ParameterList> ")" "->" <Type> "{" <StatementList> "}";
<ParameterList> ::= <Identifier> ":" <Type> ("," <Identifier> ":" <Type>)*;

<StructDeclaration> ::= "struct" <Identifier> "{" <StructBody> "}" ";";
<StructBody> ::= (<StructMember>)*;
<StructMember> ::= <FunctionDeclaration> | <VariableDeclaration>;

<Expression> ::= <AssignmentExpression> | <RangeExpression>;
<AssignmentExpression> ::= <Identifier> "=" <Expression> ";";
<RangeExpression> ::= <LogicOr> ".." <LogicOr>;
<LogicOr> ::= <LogicAnd> ( "or" <LogicAnd> )*;
<LogicAnd> ::= <EqualityExpression> ( "and" <EqualityExpression> )*;
<EqualityExpression> ::= <ComparisonExpression> ( ("==" | "!=") <ComparisonExpression> )*;
<ComparisonExpression> ::= <AdditiveExpression> ( (">" | ">=" | "<" | "<=") <AdditiveExpression> )*;
<AdditiveExpression> ::= <MultiplicativeExpression> ( ("+" | "-") <MultiplicativeExpression> )*;
<MultiplicativeExpression> ::= <UnaryExpression> ( ("*" | "/") <UnaryExpression> )*;
<UnaryExpression> ::= ( "+" | "-" | "!" ) <UnaryExpression> | <PrimaryExpression>;

<PrimaryExpression> ::= <Literal>
                      | <Identifier>
                      | "(" <Expression> ")"
                      | <FunctionCall>
                      | <MemberAccess>
                      | <ArrayAccess>
                      | <ObjectCreation>;

<FunctionCall> ::= <Identifier> "(" <ArgumentList> ")" ;
<ArgumentList> ::= <Expression> ("," <Expression>)*;

<MemberAccess> ::= <PrimaryExpression> "." <Identifier>;
<ArrayAccess> ::= <Identifier> "[" <Expression> "]";
<ObjectCreation> ::= <Identifier> "{" <PropertyAssignments> "}";
<PropertyAssignments> ::= <Property> ("," <Property>)*;
<Property> ::= <Identifier> "=" <Expression>;

<ArrayLiteral> ::= "[" <ElementList> "]";
<ElementList> ::= <Expression> ("," <Expression>)*;

<Literal> ::= <NumberLiteral> | <StringLiteral> | <BooleanLiteral> | <ArrayLiteral> | <ObjectCreation>;
<NumberLiteral> ::= <Digit>+;
<BooleanLiteral> ::= "true" | "false";
<StringLiteral> ::= "\"" <Characters> "\"";

<Identifier> ::= <Letter> (<AlphaNumeric>)*;
<AlphaNumeric> ::= <Letter> | <Digit> | "_";
<Letter> ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z";
<Digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
